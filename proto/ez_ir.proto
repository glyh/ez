syntax = "proto2";

package ez_proto;

message EzType {
  enum NonPtr {
    UNIT = 0;
    I64 = 1;
    STR = 2;
    F64 = 3;
    BOOL = 4;
  }

  oneof kind {
    NonPtr non_ptr = 1;
    EzType ptr = 2;
  }
}

message Value {
  message Unit {}

  oneof kind {
    Unit unit_val = 1;
    int64 i64_val = 2;
    string str_val = 3;
    double f64_val = 4;
    bool bool_val = 5;
  }
}

message Expr {

  message Binary {
    enum BinOp {
      ADD = 0;
      SUB = 1;
      MUL = 2;
      DIV = 3;
      MOD = 4;
      EQ = 5;
      NOTEQ = 6;
      LESSTHAN = 7;
      LESSEQ = 8;
      GREATERTHAN = 9;
      GREATEREQ = 10;
      LAND = 11;
      LOR = 12;
    }

    required BinOp op = 1;
    required Expr lhs = 2;
    required Expr rhs = 3;
  }

  message Call {
    required string callee = 1;
    repeated Expr args = 2;
  }
  oneof kind {
    Binary binary = 1;
    Value value = 2;
    string variable = 3;
    Call call = 4;
  }
  required EzType expr_type = 7;
}

message Statement {
  message Declaration {
    required string name = 1;
    required EzType type = 2;
    required Expr rhs = 3;
  }

  message If {
    required Expr condition = 1;
    required Statement then_branch = 2;
    required Statement else_branch = 3;
  }

  message Block { repeated Statement statements = 1; }

  message While {
    required Expr condition = 1;
    required Statement body = 2;
  }

  message Assign {
    required string name = 1;
    required Expr rhs = 2;
  }

  oneof kind {
    Expr expr = 1;
    Declaration declaration = 2;
    If if = 3;
    Block block = 4;
    While while = 5;
    Expr return = 6;
    Assign assign = 7;
  }
}

message EzTypedParam {
  required EzType param_type = 1;
  required string name = 2;
}

message Function {
  required EzType return_type = 1;
  required string name = 2;
  repeated EzTypedParam params = 3;
  required Statement body = 4;
}

message Extern {
  required EzType return_type = 1;
  required string name = 2;
  repeated EzTypedParam params = 3;
}

message Definition {
  oneof kind {
    Function func = 1;
    Extern extern = 2;
  }
}

message Program { repeated Definition definitions = 1; }
